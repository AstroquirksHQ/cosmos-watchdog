name: Linting & Unit Tests

on:
  push:
    branches: [ "main" ]
    tags: ['*']
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read
  packages: write

jobs:
  linting-and-unit-tests:

    runs-on: ubuntu-latest
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: testdb
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.11
        uses: actions/setup-python@v3
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: |
          python -m pip install pipenv
          pipenv install --dev
      - name: Linting
        run: |
          pipenv run lint
      - name: Unit Tests
        run: |
          pipenv run tests
        env:
          # The hostname used to communicate with the PostgreSQL service container
          DB_HOST: localhost
          # The default PostgreSQL port
          DB_PORT: 5432
          DB_USER: postgres
          DB_PASSWORD: postgres
          DB_SCHEMA: testdb

  docker-build-and-publish-api:
    needs: [ linting-and-unit-tests ]
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.meta.outputs.tags }}-api
    steps:
      - uses: actions/checkout@v3
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          # list of Docker images to use as base name for tags
          images: |
            ghcr.io/astroquirkshq/cosmos-watchdog
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          file: Dockerfile-api
          tags: ${{ steps.meta.outputs.tags }}-api
          labels: ${{ steps.meta.outputs.labels }}
          build-args: COMMIT_HASH=${{ github.sha }}
          push: true

  docker-build-and-publish-bot:
    needs: [ linting-and-unit-tests ]
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.meta.outputs.tags }}-bot
    steps:
      - uses: actions/checkout@v3
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          # list of Docker images to use as base name for tags
          images: |
            ghcr.io/astroquirkshq/cosmos-watchdog
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          file: Dockerfile-bot
          tags: ${{ steps.meta.outputs.tags }}-bot
          labels: ${{ steps.meta.outputs.labels }}
          build-args: COMMIT_HASH=${{ github.sha }}
          push: true

  docker-build-and-publish-sync:
    needs: [ linting-and-unit-tests ]
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.meta.outputs.tags }}-sync
    steps:
      - uses: actions/checkout@v3
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          # list of Docker images to use as base name for tags
          images: |
            ghcr.io/astroquirkshq/cosmos-watchdog
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          file: Dockerfile-sync
          tags: ${{ steps.meta.outputs.tags }}-sync
          labels: ${{ steps.meta.outputs.labels }}
          build-args: COMMIT_HASH=${{ github.sha }}
          push: true

  bot-integration-tests:
    needs: [ docker-build-and-publish-bot, linting-and-unit-tests ]

    runs-on: ubuntu-latest
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: testdb
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432
      cosmos-watchdog:
        image: ${{ needs.docker-build-and-publish-bot.outputs.image_tag }}
        env:
          # The hostname used to communicate with the PostgreSQL service container
          DB_HOST: postgres
          # The default PostgreSQL port
          DB_PORT: 5432
          DB_USER: postgres
          DB_PASSWORD: postgres
          DB_SCHEMA: testdb
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
          BOT_CHANNEL_ID: ${{ secrets.TEST_CHANNEL_ID }}
        ports:
          # Maps tcp port 5000 on service container to the host
          - 5000:5000
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.11
        uses: actions/setup-python@v3
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: |
          python -m pip install pipenv 
          pipenv install --dev
      - name: Run IT tests
        run: pipenv run it-tests bot

  api-integration-tests:
    needs: [docker-build-and-publish-api, linting-and-unit-tests]

    runs-on: ubuntu-latest
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: testdb
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432
      cosmos-watchdog:
        image: ${{ needs.docker-build-and-publish-api.outputs.image_tag }}
        env:
          # The hostname used to communicate with the PostgreSQL service container
          DB_HOST: postgres
          # The default PostgreSQL port
          DB_PORT: 5432
          DB_USER: postgres
          DB_PASSWORD: postgres
          DB_SCHEMA: testdb
          API_HOST: 0.0.0.0
        ports:
          # Maps tcp port 5000 on service container to the host
          - 5000:5000
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.11
        uses: actions/setup-python@v3
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: |
          python -m pip install pipenv 
          pipenv install --dev
      - name: Run IT tests
        run: pipenv run it-tests api